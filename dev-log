vdi-sim.py: L517, Sept.07, 2015
I had no idea why I added the "if True:" clause to make all migrations full. Is that because I want to simulate the case of using full migration alone? 
After I commented it out, it does not work any more. there is the assertion errors in L693. 
I need to revert the code to the version that works. Use the github to do so. 
Follow-up: I pulled the commit d91fbf7dcdb028616af80e595cd4f76b54a619df from github, where it worked in 200VM. Yes. it worked. But I saw some bugs in the code. I had no idea whether those are bugs.

TODO: There are two places where I need to change: 
-decide_detailed_migration_plan() function: 
-accounting function
to add the accounting. sorted by source host or dest. host. And sum them up for our accouting. how many pairs. Full or partial.

From the implementation of update_vms, it seems that we always reintegrate the remote partials and turn its current host into its origin host. It will make things worse for these VMs. 
A: I commented out the line that assign the current host as its origin host, and see if things change. The re-integration number should be bigger than before.=> Yes. I verified that. 

After commenting out the line, the overall saving does not change that much. The partial resume# increases. Full migration# increases. 

questions: 1. What is partial resume#? Is it reintegration?
A: resume == reintegration

2. Is there any case we leave the remote partials that are turning into active to run on the current host? 
A: If there is enough room in the host, do we migrate the rest of the VM to this host?

3. How do we handle such cases?
A: There are 2 glitches in the simulator: 
   a. The simulator is bad in that while it is migrating, it ignores that VMs that turn into active from idle. And keeps it running again. 
   b. it does not have this aborted migrations#. 

So the logic should be like this: 
   during migrating from host a to host b, if some VMs from a turning into active, then there are 2 cases, 
   if b has enough resources to accomandate the VMs, then make them full migrations.
   if not, then abort all migrations from host a. We should record the aborted full migration#, and partial migration#. 
TODO: add this logic later. 


4. Is "partial idle VM# turning into active" number reliable?
A: we don't care about this number for now. 

5. Is it because we have some migration intevals, so that we have to wait for the migrations to finish? So the simulator does not make the decision right now? There is a lagging behind? 

I may just print out the detailed migrated logs, instead of just a number of VMs for each host.
So I should write a program to deduct the migration latency from the logs of migrations. Pick an order for the migrated VMs. Simply the default order of printing out there. 

If its host has enough capacity (i.e., in the transition log csv file the 6th column is N), then it is local partial -> full transitions, we note down its latency as 0. Otherwise, we need to calculate its dependency on other migrations. 

Update at 12:21AM Sept. 9, 2015:
1. I wrote the script to correlate the two logs. it is in ~/Dropbox/. 
2. There are some errors with the logs. Some partially migrated VMs are left not migrated. There lack of actions from the host logs to make room for those VMs. 
3. There are lagging behind the actions. So the errors are wrong about them. I need to debug the simulator. The results could easily go wrong. 

Should account for the local partials waiting for others VMs to make space for them. 